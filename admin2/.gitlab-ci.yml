variables:
    SERVER_TEST:
        value: ""
        description: "Target deploy server"
    COMMAND_TEST:
        value: ""
        options:
            - "deploy-test"
            - "release-test"
            - ""
        description: "To deploy a feature-branch for testing, select 'deploy-test'. After testing is done, run this job again with 'release-test'"
    BRAND:
        value: $CI_PROJECT_NAME
        description: "Target deploy brand (project folder name)"
    TARGET_BRANCH:
        value: ""
        description: "Type 'main' to deploy the main branch, otherwise leave empty to deploy the selected branch name"
    DOCKER_PIPELINE:
        value: "false"
        options:
            - "false"
            - "true"
        description: "Select 'true' to create and push a docker image"

stages:
    - deploy_test
    - pipeline_run
    - composer_validate
    - sonar_test_branch
    - notify_slack
    - deploy_preprod
    - test_preprod_url
    - deploy_prod
    - test_prod_url
    - update_story
    - generate_hash
    - docker_version_management
    - docker_build
    - docker_push

include:
    - project: "utilities/ci-templates"
      ref: "main"
      file:
          - "deploy-templates/deploy_test.yml"
          - "deploy-templates/pipeline_run.yml"
          - "deploy-templates/deploy_prod.yml"
          - "code-analysis-templates/composer_validate_job.yml"
          - "code-analysis-templates/sonar_test_branch.yml"
          - "automation-templates/test_url.yml"
          - "automation-templates/generate_hash.yml"
          - "automation-templates/update_story.yml"
          - "automation-templates/slack_notification.yml"
          - "docker-pipeline/version-management.yml"
          - "docker-pipeline/docker-config.yml"
          - "docker-pipeline/build.yml"
          - "docker-pipeline/push.yml"

generate_hash:
    rules:
        - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "schedule" && $DOCKER_PIPELINE == "false"'
          changes:
              - "app/**/*"
              - "config/**/*"

sonar_test_branch:
    variables:
        EXTRA_ARGS: "-Dsonar.exclusions=$SONARQUBE_EXCLUSIONS"

1_deploy_preprod_videoslots:
    extends: .deploy_job_template
    stage: deploy_preprod
    variables:
        SERVERS: $SERVER_PREPROD_VIDEOSLOTS

test_preprod_url:
    extends: .test_url_template
    stage: test_preprod_url
    variables:
        URL: $URL_PREPROD

1_deploy_prod_videoslots:
    extends: .deploy_job_template
    variables:
        SERVERS: $SERVER_PROD_VIDEOSLOTS

2_deploy_prod_mrvegas:
    extends: .deploy_job_template
    variables:
        SERVERS: $SERVER_PROD_MRVEGAS

3_deploy_prod_kungaslottet_se:
    extends: .deploy_job_template
    variables:
        SERVERS: $SERVER_PROD_KUNGASLOTTET_SE

4_deploy_prod_megariches_com:
    extends: .deploy_job_template
    variables:
        SERVERS: $SERVER_PROD_MEGARICHES_COM

5_deploy_prod_dbet:
    extends: .deploy_job_template
    variables:
        SERVERS: $SERVER_PROD_DBET_COM

release_content_notification:
  stage: update_story
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "schedule" && $DOCKER_PIPELINE == "false"'
  before_script: |
        if [[ -z "${JIRA_API_URL}" || -z "${JIRA_API_TOKEN}" || -z "${SENDER_EMAIL}" || -z "${SMTP_PASSWORD}" || -z "${SMTP_SERVER}" ]]; then
            echo "Error: required environment variables undefined." && exit 1
        else
            echo "Required environment variables are set."
        fi
        
        send_email() {
            local RECIPIENTS="$1"
            local SUBJECT="$2"
            local BODY="$3"
            TMPFILE="$(mktemp /tmp/email.XXXXXX)"
            {
            echo "From: ${SENDER_EMAIL}"
            echo "To: $RECIPIENTS"
            echo "Subject: $SUBJECT"
            echo "MIME-Version: 1.0"
            echo "Content-Type: text/plain; charset=\"utf-8\""
            echo
            echo -e "$BODY"
            } > "$TMPFILE"
            curl --url "smtp://${SMTP_SERVER}:587" \
                --ssl-reqd \
                --mail-from "${SENDER_EMAIL}" \
                --mail-rcpt "$RECIPIENTS" \
                --upload-file "$TMPFILE" \
                --user "${SENDER_EMAIL}:${SMTP_PASSWORD}" \
                --silent --show-error
            rm -f "$TMPFILE"
        }

        add_jira_label() {
            local JIRA_KEY="$1"
            local LABEL_NAME="$2"
            curl -sS -X PUT \
                -H "Content-Type: application/json" \
                --user "${JIRA_API_TOKEN}" \
                --url "${JIRA_API_URL}/rest/api/2/issue/${JIRA_KEY}" \
                --data "{\"update\":{\"labels\":[{\"add\":\"${LABEL_NAME}\"}]}}"
        }
  script: |
        git remote set-url origin git@"${CI_SERVER_SHELL_SSH_HOST}":"${CI_PROJECT_PATH}".git
        git fetch origin main
        CHANGED_FILES=$(git diff --name-only "$CI_COMMIT_SHA^" "$CI_COMMIT_SHA")
        echo "CHANGED FILES: $CHANGED_FILES"
        RELEVANT_FILES=()
        for file in $CHANGED_FILES; do
            if grep -qE "class\s+\w+\s+extends\s+SeederTranslation" "$file"; then
                RELEVANT_FILES+=("$file")
            fi
        done
        echo "RELEVANT FILES: $RELEVANT_FILES"
        ALIASES=()

        GIT_BRANCH="$(git log --merges --oneline -1 | cut -d " " -f 4 | sed "s/'//g")"
        echo "GIT BRANCH: $GIT_BRANCH"
        if echo "$GIT_BRANCH" | grep -Eq '.*/[A-Z]+-[0-9]+'; then
            JIRA_KEY="$(echo "${GIT_BRANCH}" | cut -d "/" -f 2 | cut -d "-" -f 1,2)"
        else
            JIRA_KEY="NO-JIRA"
        fi
        echo "JIRA_KEY: $JIRA_KEY"
        JIRA_LINK="https://videoslots.atlassian.net/browse/$JIRA_KEY"
        echo "JIRA_LINK: $JIRA_LINK"
        MR_IID="$(git log --merges --oneline -1 | grep -oP 'Merge branch.*into.*' | grep -oP '!\K\d+' || echo "")"
        if [ -z "$MR_IID" ]; then
            MR_IID="$(git log --format='%s' -1 | grep -oP '!\K\d+' || echo "")"
        fi
        if [ -n "$MR_IID" ]; then
            MR_LINK="$CI_PROJECT_URL/-/merge_requests/$MR_IID"
        else
            MR_LINK="$CI_PROJECT_URL/-/commits/$CI_COMMIT_SHA"
        fi
        echo "MR_LINK: $MR_LINK"

        if [ -z "${RELEVANT_FILES[*]}" ]; then
            echo "No relevant files found that extend SeederTranslation."
            exit 0
        fi

        if [ -z "$JIRA_KEY" ]; then
            echo "No JIRA key found in branch name."
            exit 0
        fi
        
        for file in "${RELEVANT_FILES[@]}"; do
            while IFS= read -r alias; do
                ALIASES+=("$alias")
            done < <(grep -oP "'\K[^']+(?='\s*=>)" "$file" 2>/dev/null || echo "")
        done
        echo "EXTRACTED_ALIASES:"
        for alias in "${ALIASES[@]}"; do
            echo "- $alias"
        done

        
        if [ ${#ALIASES[@]} -eq 0 ]; then
            echo "No aliases found in the relevant files."
            exit 0
        fi
        

        echo "Relevant files: ${RELEVANT_FILES[*]}"
        echo "Aliases extracted: ${ALIASES[*]}"
        echo "Adding label 'content-release' to JIRA issue $JIRA_KEY..."
        add_jira_label "$JIRA_KEY" "content-release"
        echo "Label 'content-release' added to JIRA issue $JIRA_KEY."
        echo "Sending email notification..."
        SUBJECT="Releasing content $JIRA_KEY"
        read -r -d '' BODY <<EOF
        Jira link: $JIRA_LINK
        MR link: $MR_LINK
        Aliases thats been introduced:
        $(printf '  - %s\n' "${ALIASES[@]}")
        EOF

        send_email "contentteam@videoslots.com" "$SUBJECT" "$BODY"
        send_email "geza.koblo@immensegroup.com" "$SUBJECT" "$BODY"
